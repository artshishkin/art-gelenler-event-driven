version: '3.8'
services:

  twitter-to-kafka-service:
    image: ${GROUP_ID}/art-gelenler-twitter-to-kafka-service:${SERVICE_VERSION:-latest}
    ports:
      - "8091:8080"
    volumes:
      - "./docker-logs/twitter-to-kafka-service:/workspace/twitter-to-kafka-service/logs"
    depends_on:
      config-server:
        condition: service_healthy
      kafka-broker-1:
        condition: service_healthy
      kafka-broker-2:
        condition: service_healthy
      kafka-broker-3:
        condition: service_healthy
    environment:
      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n -Xms128m -Xmx256m"
      - "LOGGING_LEVEL_NET_SHYSHKIN_STUDY=debug"
      - "LOGGING_LEVEL_ROOT=info"
      - "KAFKA-CONFIG_TOPIC-NAME=twitter-topic"
      - "KAFKA-CONFIG_BOOTSTRAP-SERVERS=kafka-broker-1:9092, kafka-broker-2:9092, kafka-broker-3:9092"
      - "KAFKA-CONFIG_SCHEMA-REGISTRY_URL=http://schema-registry:8081"
      - "TWITTER-TO-KAFKA-SERVICE_MOCK_ENABLE=true"
      - "ENCRYPT_KEY=${ENCRYPT_KEY}"
      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8080"
    networks:
      - ${GLOBAL_NETWORK:-services}

  config-server:
    image: ${GROUP_ID}/art-gelenler-config-server:${SERVICE_VERSION:-latest}
    ports:
      - "8080:8080"
    restart: always
    volumes:
      - "./docker-logs/config-server:/workspace/config-server/logs"
#    healthcheck:
#      test: curl -m 5 --silent --fail --request GET http://localhost:8080/actuator/health | jq --exit-status -n 'inputs | if has("status") then .status=="UP" else false end' > /dev/null || exit 1
#      interval: 10s
#      timeout: 2s
#      retries: 20
#      start_period: 20s
    environment:
      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n -Xms128m -Xmx256m"
      - "ENCRYPT_KEY=${ENCRYPT_KEY}"
      - "SPRING_PROFILES_ACTIVE=separate-remote-git-repo"
      - "GITHUB_ACCESS_TOKEN={cipher}cbd922760a25785f8fd3b774c1d159cd7c291c9e14338287adb1aa3ed69793765b2a3f56db1c2498300236bfa11e6a981bfcb0aecdaee7abe38b50017ef0cfe4"
    networks:
      - ${GLOBAL_NETWORK:-services}

  kafka-to-elastic-service:
    image: ${GROUP_ID}/art-gelenler-kafka-to-elastic-service:${SERVICE_VERSION:-latest}
    ports:
      - "8092:8080"
    volumes:
      - "./docker-logs/kafka-to-elastic-service:/workspace/kafka-to-elastic-service/logs"
#      - "./check-kafka-topics-created.sh:/usr/local/bin/check-kafka-topics-created.sh"
#    user: root
#    entrypoint: [ "check-kafka-topics-created.sh" ]
    depends_on:
      config-server:
        condition: service_healthy
      elastic-1:
        condition: service_healthy
      elastic-2:
        condition: service_healthy
      elastic-3:
        condition: service_healthy
      kafka-broker-1:
        condition: service_healthy
      kafka-broker-2:
        condition: service_healthy
      kafka-broker-3:
        condition: service_healthy
    environment:
      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n -Xms128m -Xmx256m"
      - "KAFKA-CONFIG_BOOTSTRAP-SERVERS=kafka-broker-1:9092, kafka-broker-2:9092, kafka-broker-3:9092"
      - "KAFKA-CONFIG_SCHEMA-REGISTRY_URL=http://schema-registry:8081"
      - "ENCRYPT_KEY=${ENCRYPT_KEY}"
      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8080"
      - "ELASTIC-CONFIG_CONNECTION-URL=http://elastic-1:9200"
    networks:
      - ${GLOBAL_NETWORK:-services}

  elastic-query-service-1:
    image: ${GROUP_ID}/art-gelenler-elastic-query-service:${SERVICE_VERSION:-latest}
    ports:
      - "8093:8080"
    volumes:
      - "./docker-logs/elastic-query-service:/workspace/elastic-query-service/logs"
    depends_on:
      config-server:
        condition: service_healthy
      elastic-1:
        condition: service_healthy
      elastic-2:
        condition: service_healthy
      elastic-3:
        condition: service_healthy
    environment:
      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n -Xms128m -Xmx256m"
      - "ENCRYPT_KEY=${ENCRYPT_KEY}"
      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8080"
      - "ELASTIC-CONFIG_CONNECTION-URL=http://elastic-1:9200"
      - "spring.security.oauth2.resourceserver.jwt.issuer-uri=http://keycloak-authorization-server:8080/realms/gelenler-tutorial"
    networks:
      - ${GLOBAL_NETWORK:-services}

  elastic-query-service-2:
    image: ${GROUP_ID}/art-gelenler-elastic-query-service:${SERVICE_VERSION:-latest}
    ports:
      - "8095:8080"
    volumes:
      - "./docker-logs/elastic-query-service:/workspace/elastic-query-service/logs"
    depends_on:
      config-server:
        condition: service_healthy
      elastic-1:
        condition: service_healthy
      elastic-2:
        condition: service_healthy
      elastic-3:
        condition: service_healthy
    environment:
      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n -Xms128m -Xmx256m"
      - "ENCRYPT_KEY=${ENCRYPT_KEY}"
      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8080"
      - "ELASTIC-CONFIG_CONNECTION-URL=http://elastic-1:9200"
      - "spring.security.oauth2.resourceserver.jwt.issuer-uri=http://keycloak-authorization-server:8080/realms/gelenler-tutorial"
    networks:
      - ${GLOBAL_NETWORK:-services}

  elastic-query-web-client:
    image: ${GROUP_ID}/art-gelenler-elastic-query-web-client:${SERVICE_VERSION:-latest}
    ports:
      - "8094:8080"
    volumes:
      - "./docker-logs/elastic-query-web-client:/workspace/elastic-query-web-client/logs"
    depends_on:
      config-server:
        condition: service_healthy
      elastic-query-service-1:
        condition: service_healthy
      elastic-query-service-2:
        condition: service_healthy
    environment:
      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n -Xms128m -Xmx256m"
      - "ENCRYPT_KEY=${ENCRYPT_KEY}"
      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8080"
      - "elastic-query-web-client.webclient.instances[0].host=elastic-query-service-1"
      - "elastic-query-web-client.webclient.instances[0].port=8080"
      - "elastic-query-web-client.webclient.instances[1].host=elastic-query-service-2"
      - "elastic-query-web-client.webclient.instances[1].port=8080"
    networks:
      - ${GLOBAL_NETWORK:-services}

  reactive-elastic-query-service:
    image: ${GROUP_ID}/art-gelenler-reactive-elastic-query-service:${SERVICE_VERSION:-latest}
    ports:
      - "8096:8080"
    volumes:
      - "./docker-logs/reactive-elastic-query-service:/workspace/reactive-elastic-query-service/logs"
    depends_on:
      config-server:
        condition: service_healthy
      elastic-1:
        condition: service_healthy
      elastic-2:
        condition: service_healthy
      elastic-3:
        condition: service_healthy
    environment:
      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n -Xms128m -Xmx256m"
      - "ENCRYPT_KEY=${ENCRYPT_KEY}"
      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8080"
      - "ELASTIC-CONFIG_CONNECTION-URL=http://elastic-1:9200"
    networks:
      - ${GLOBAL_NETWORK:-services}

  reactive-elastic-query-web-client:
    image: ${GROUP_ID}/art-gelenler-reactive-elastic-query-web-client:${SERVICE_VERSION:-latest}
    ports:
      - "8098:8080"
    volumes:
      - "./docker-logs/reactive-elastic-query-web-client:/workspace/reactive-elastic-query-web-client/logs"
    depends_on:
      config-server:
        condition: service_healthy
      reactive-elastic-query-service:
        condition: service_healthy
    environment:
      - "JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n -Xms128m -Xmx256m"
      - "ENCRYPT_KEY=${ENCRYPT_KEY}"
      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8080"
      - "elastic-query-web-client.webclient.instances[0].host=reactive-elastic-query-service"
      - "elastic-query-web-client.webclient.instances[0].port=8080"
      - "elastic-query-web-client.webclient.base-url=http://reactive-elastic-query-service:8080/reactive-elastic-query-service/documents"
    networks:
      - ${GLOBAL_NETWORK:-services}

