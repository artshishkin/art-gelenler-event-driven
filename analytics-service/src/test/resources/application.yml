spring:
  application:
    name: analytics-service
  cloud:
    config:
      enabled: false
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8181/realms/gelenler-tutorial
  sql:
    init:
      schema-locations: classpath:init-schema.sql
      data-locations: classpath:init-data.sql
      mode: always

analytics-service:
  version: v2
  custom-audience: ${spring.application.name}

server:
  servlet:
    context-path: /${spring.application.name}

springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
security:
  paths-to-ignore: /api-docs

kafka-config:
  bootstrap-servers: localhost:19092,localhost:29092,localhost:39092
  schema-registry:
    key: schema.registry.url
    url: http://localhost:8081
  topic-name: twitter-analytics-topic
  topic-names-to-create:
    - twitter-analytics-topic

kafka-consumer-config:
  key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
  consumer-group-id: twitter-topic-consumer
  auto-offset-reset: earliest
  specific-avro-reader-key: specific.avro.reader
  specific-avro-reader: true
  batch-listener: true
  auto-startup: false
  concurrency-level: 3
  session-timeout-ms: 10000
  heartbeat-interval-ms: 3000
  max-poll-interval-ms: 300000
  max-poll-records: 500
  max-partition-fetch-bytes-default: 1048576
  max-partition-fetch-bytes-boost-factor: 1
  poll-timeout-ms: 150

retry-config:
  initial-interval-ms: 1000
  max-interval-ms: 10000
  multiplier: 2.4
  max-attempts: 3
  sleep-time-ms: 2000

